# Generated by Django 2.2.5 on 2020-12-04 03:14

import apps.auctions.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('master_data', '__first__'),
    ]

    operations = [
        migrations.CreateModel(
            name='Auction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('item_code', models.CharField(max_length=8, unique=True)),
                ('title', models.CharField(max_length=255)),
                ('budget', models.FloatField()),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('extend_time', models.DateTimeField(null=True)),
                ('contract_from', models.DateTimeField(blank=True, null=True)),
                ('contract_to', models.DateTimeField(blank=True, null=True)),
                ('delivery_date', models.DateField()),
                ('delivery_address', models.CharField(max_length=1024)),
                ('general_term_condition', models.FileField(null=True, upload_to=apps.auctions.models.general_term_condition_path)),
                ('other_requirement', models.FileField(null=True, upload_to=apps.auctions.models.other_requirement_directory_path)),
                ('note_from_buyer', models.CharField(blank=True, max_length=1024, null=True)),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'draft'), (2, 'not-start'), (3, 'running'), (4, 'on-process'), (5, 'awarded'), (6, 'cancelled')], default=1)),
                ('reasons', models.TextField(blank=True, max_length=6500, null=True)),
                ('number_of_times_triggered', models.IntegerField(default=0)),
                ('coupon', models.TextField(null=True)),
                ('split_order', models.PositiveSmallIntegerField(choices=[(1, 'Award to only one supplier'), (2, 'Slip order to ward multiple suppliers')], default=1)),
                ('auction_next_round', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='auction_next_rounds', to='auctions.Auction')),
                ('auction_type1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='auction_type_1', to='master_data.AuctionType')),
                ('auction_type2', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='auction_type_2', to='master_data.AuctionType')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='master_data.Category')),
                ('contract_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='master_data.ContractType')),
                ('currency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='master_data.Currency')),
                ('delivery_term', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='master_data.DeliveryTerm')),
                ('payment_term', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='master_data.PaymentTerm')),
                ('technical_weighting', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='master_data.TechnicalWeighting')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='auctions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'auction',
            },
        ),
        migrations.CreateModel(
            name='AuctionItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('budget', models.FloatField(blank=True, null=True)),
                ('quantity', models.IntegerField()),
                ('price_yellow', models.FloatField(blank=True, null=True)),
                ('target_price', models.FloatField(blank=True, null=True)),
                ('minimum_bid_step', models.FloatField(blank=True, null=True)),
                ('maximum_bid_step', models.FloatField(null=True)),
                ('max_price', models.FloatField(blank=True, null=True)),
                ('auction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='auctions.Auction')),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='unit', to='master_data.UnitofMeasure')),
            ],
            options={
                'db_table': 'auction_item',
            },
        ),
        migrations.CreateModel(
            name='AuctionTypeTrafficLight',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('max_price_settings', models.BooleanField()),
                ('max_price_type', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Maximum price for entire Auction'), (2, 'Maximum price per position')], null=True)),
                ('individual_or_max_price', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Individual max prices per supplier'), (2, 'Maximum price must not be reached')], null=True)),
                ('hide_target_price', models.BooleanField(default=True)),
                ('type_of_bidding', models.PositiveSmallIntegerField(choices=[(1, 'Bidder must underbid himself'), (2, 'Bidder must underbid the best bid')])),
                ('type_of_bid_monitoring1', models.BooleanField(null=True)),
                ('type_of_bid_monitoring2', models.BooleanField(null=True)),
                ('type_of_bid_monitoring3', models.BooleanField(null=True)),
                ('type_of_bid_monitoring5', models.BooleanField(null=True)),
                ('type_of_bid_monitoring6', models.BooleanField(null=True)),
                ('views_disabled', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'permanent'), (2, 'in the last minutes')], null=True)),
                ('minutes', models.IntegerField(blank=True, null=True)),
                ('auction_extension', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Auction is controlled by buyer'), (2, 'Automatic extension')], null=True)),
                ('auction_extension_trigger', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'New bid in trigger time'), (2, 'New bid among the best rankings'), (3, 'Equal new best bids')], null=True)),
                ('number_of_rankings', models.IntegerField(blank=True, null=True)),
                ('frequency', models.IntegerField(blank=True, null=True)),
                ('trigger_time', models.IntegerField(blank=True, null=True)),
                ('prolongation_by', models.IntegerField(blank=True, null=True)),
                ('entire_auction', models.FloatField(blank=True, null=True)),
                ('auction', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='auction_type_traffic_light', to='auctions.Auction')),
            ],
            options={
                'db_table': 'auction_type_traffic_light',
            },
        ),
        migrations.CreateModel(
            name='AuctionTypeSealedBid',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_of_bid_monitoring6', models.BooleanField(default=True, null=True)),
                ('views_disabled', models.PositiveSmallIntegerField(choices=[(1, 'permanent'), (2, 'in the last minutes')], default=1)),
                ('auction_extension', models.PositiveSmallIntegerField(choices=[(1, 'Auction is controlled by buyer'), (2, 'Automatic extension')], default=1)),
                ('auction', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='auction_type_sealed_bid', to='auctions.Auction')),
            ],
            options={
                'db_table': 'auction_type_sealed_bid',
            },
        ),
        migrations.CreateModel(
            name='AuctionTypeRanking',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('max_price_settings', models.BooleanField()),
                ('max_price_type', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Maximum price for entire Auction'), (2, 'Maximum price per position')], null=True)),
                ('individual_or_max_price', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Individual max prices per supplier'), (2, 'Maximum price must not be reached')], null=True)),
                ('hide_target_price', models.BooleanField(default=True)),
                ('type_of_bidding', models.PositiveSmallIntegerField(choices=[(1, 'Bidder must underbid himself'), (2, 'Bidder must underbid the best bid')])),
                ('type_of_bid_monitoring1', models.BooleanField(null=True)),
                ('type_of_bid_monitoring2', models.BooleanField(default=True, null=True)),
                ('type_of_bid_monitoring3', models.BooleanField(null=True)),
                ('type_of_bid_monitoring5', models.BooleanField(null=True)),
                ('type_of_bid_monitoring6', models.BooleanField(null=True)),
                ('views_disabled', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'permanent'), (2, 'in the last minutes')], null=True)),
                ('minutes', models.IntegerField(blank=True, null=True)),
                ('auction_extension', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Auction is controlled by buyer'), (2, 'Automatic extension')], null=True)),
                ('auction_extension_trigger', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'New bid in trigger time'), (2, 'New bid among the best rankings'), (3, 'Equal new best bids')], null=True)),
                ('number_of_rankings', models.IntegerField(blank=True, null=True)),
                ('frequency', models.IntegerField(blank=True, null=True)),
                ('trigger_time', models.IntegerField(blank=True, null=True)),
                ('prolongation_by', models.IntegerField(blank=True, null=True)),
                ('entire_auction', models.FloatField(blank=True, null=True)),
                ('auction', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='auction_type_ranking', to='auctions.Auction')),
            ],
            options={
                'db_table': 'auction_type_ranking',
            },
        ),
        migrations.CreateModel(
            name='AuctionTypePrices',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('max_price_settings', models.BooleanField()),
                ('max_price_type', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Maximum price for entire Auction'), (2, 'Maximum price per position')], null=True)),
                ('individual_or_max_price', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Individual max prices per supplier'), (2, 'Maximum price must not be reached')], null=True)),
                ('hide_target_price', models.BooleanField(default=True)),
                ('type_of_bidding', models.PositiveSmallIntegerField(choices=[(1, 'Bidder must underbid himself'), (2, 'Bidder must underbid the best bid')])),
                ('type_of_bid_monitoring1', models.BooleanField(null=True)),
                ('type_of_bid_monitoring5', models.BooleanField(null=True)),
                ('type_of_bid_monitoring6', models.BooleanField(null=True)),
                ('views_disabled', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'permanent'), (2, 'in the last minutes')], null=True)),
                ('minutes', models.IntegerField(blank=True, null=True)),
                ('auction_extension', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Auction is controlled by buyer'), (2, 'Automatic extension')], null=True)),
                ('auction_extension_trigger', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'New bid in trigger time'), (2, 'New bid among the best rankings'), (3, 'Equal new best bids')], null=True)),
                ('number_of_rankings', models.IntegerField(blank=True, null=True)),
                ('frequency', models.IntegerField(blank=True, null=True)),
                ('trigger_time', models.IntegerField(blank=True, null=True)),
                ('prolongation_by', models.IntegerField(blank=True, null=True)),
                ('entire_auction', models.FloatField(blank=True, null=True)),
                ('auction', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='auction_type_prices', to='auctions.Auction')),
            ],
            options={
                'db_table': 'auction_type_prices',
            },
        ),
        migrations.CreateModel(
            name='AuctionTypeJapanese',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('initial_price', models.FloatField()),
                ('end_price', models.FloatField()),
                ('price_step', models.FloatField()),
                ('price_validity', models.FloatField()),
                ('round_auction', models.IntegerField(default=1)),
                ('auction', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='auction_type_japanese', to='auctions.Auction')),
            ],
            options={
                'db_table': 'auction_type_japanese',
            },
        ),
        migrations.CreateModel(
            name='AuctionTypeDutch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('initial_price', models.FloatField()),
                ('end_price', models.FloatField()),
                ('price_step', models.FloatField()),
                ('price_validity', models.FloatField()),
                ('round_auction', models.IntegerField(default=1)),
                ('auction', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='auction_type_dutch', to='auctions.Auction')),
            ],
            options={
                'db_table': 'auction_type_dutch',
            },
        ),
        migrations.CreateModel(
            name='AuctionSupplier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('supplier_status', models.PositiveSmallIntegerField(choices=[(1, 'Awaiting'), (2, 'Deposited'), (3, 'Cancelled'), (4, 'Partial'), (5, 'Ready'), (6, 'Awaiting award'), (7, 'Withdraw'), (8, 'Awaiting refunding request'), (9, 'Request refunding'), (10, 'Refunded'), (11, 'Submitted')], default=1)),
                ('is_accept', models.BooleanField(default=False)),
                ('awarded', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'awarded'), (2, 'rejected'), (3, 'auction cancelled')], null=True)),
                ('reasons', models.TextField(blank=True, max_length=6500, null=True)),
                ('note_from_supplier', models.CharField(blank=True, max_length=1024, null=True)),
                ('email_reminder_deposit', models.DateTimeField(default=None, null=True)),
                ('is_accept_rule', models.BooleanField(default=False)),
                ('auction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='suppliers', to='auctions.Auction')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'auction_supplier',
            },
        ),
        migrations.CreateModel(
            name='AuctionResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('auction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auctions.Auction')),
            ],
            options={
                'db_table': 'auction_result',
            },
        ),
        migrations.CreateModel(
            name='AuctionOtherRequirement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('other_requirement', models.FileField(upload_to=apps.auctions.models.other_requirement_directory_path)),
                ('auction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='other_requirements', to='auctions.Auction')),
            ],
            options={
                'db_table': 'auction_other_requirement',
            },
        ),
        migrations.CreateModel(
            name='AuctionItemSupplier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.FloatField()),
                ('technical_score', models.FloatField(null=True)),
                ('confirm_price', models.FloatField(null=True)),
                ('auction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auctions.Auction')),
                ('auction_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='suppliers', to='auctions.AuctionItem')),
                ('auction_supplier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='auctions.AuctionSupplier')),
            ],
            options={
                'db_table': 'auction_item_supplier',
            },
        ),
        migrations.CreateModel(
            name='AuctionGeneralTermCondition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('general_term_condition', models.FileField(upload_to=apps.auctions.models.general_term_condition_path)),
                ('auction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='general_term_conditions', to='auctions.Auction')),
            ],
            options={
                'db_table': 'auction_general_term_condition',
            },
        ),
        migrations.CreateModel(
            name='AuctionEmail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('auction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auctions.Auction')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'auction_email',
            },
        ),
        migrations.CreateModel(
            name='AuctionBid',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.FloatField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('auction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bids', to='auctions.Auction')),
                ('auction_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auctions.AuctionItem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'auction_bid',
            },
        ),
        migrations.CreateModel(
            name='AuctionAward',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('percentage', models.FloatField()),
                ('price', models.FloatField()),
                ('platform_fee', models.FloatField()),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('auction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='auction_award', to='auctions.Auction')),
                ('auction_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='auction_award_item', to='auctions.AuctionItem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='auction_award_supplier', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'auction_award',
            },
        ),
    ]
