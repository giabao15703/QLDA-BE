# Generated by Django 3.0 on 2021-06-15 04:07

import apps.rfx.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('master_data', '0013_promotion_commission'),
    ]

    operations = [
        migrations.CreateModel(
            name='RFX',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_code', models.CharField(max_length=8, unique=True)),
                ('rfx_type', models.PositiveSmallIntegerField(choices=[(1, 'RFI'), (2, 'RFP'), (3, 'RFQ')])),
                ('title', models.CharField(max_length=255)),
                ('budget', models.FloatField()),
                ('due_date', models.DateTimeField()),
                ('delivery_from', models.DateField()),
                ('delivery_to', models.DateField()),
                ('delivery_address', models.CharField(max_length=1024)),
                ('terms_and_conditions', models.CharField(blank=True, max_length=225, null=True)),
                ('other_requirement', models.CharField(max_length=1024, null=True)),
                ('note_for_supplier', models.CharField(blank=True, max_length=1024, null=True)),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'draft'), (2, 'published'), (3, 'due date expire'), (4, 'awarded'), (5, 'e-auction'), (6, 'negotiation'), (7, 'completed'), (8, 'cancelled')], default=1)),
                ('split_order', models.PositiveSmallIntegerField(choices=[(1, 'Award to only one supplier'), (2, 'Slip order to ward multiple suppliers')], default=1)),
                ('max_supplier', models.IntegerField(null=True)),
                ('supplier_joined_amount', models.IntegerField(null=True)),
                ('quote_status', models.BooleanField(choices=[(1, 'full'), (2, 'not full')], default=2)),
                ('seat_available', models.PositiveSmallIntegerField(choices=[(1, 'available'), (2, 'full')], default=1)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='categories', to='master_data.Category')),
                ('contract_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contract_types', to='master_data.ContractType')),
                ('currency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='currencies', to='master_data.Currency')),
                ('delivery_term', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='delivery_terms', to='master_data.DeliveryTerm')),
                ('payment_term', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payment_terms', to='master_data.PaymentTerm')),
                ('rfx_next_round', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='rfx_next_rounds', to='rfx.RFX')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rfx_user_buyers', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'rfx_rfxs',
            },
        ),
        migrations.CreateModel(
            name='RFXItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('part_number', models.CharField(max_length=50)),
                ('quantity', models.IntegerField()),
                ('unit_price', models.FloatField(blank=True, null=True)),
                ('total_amount', models.CharField(blank=True, max_length=255, null=True)),
                ('rfx', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='rfx.RFX')),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='units', to='master_data.UnitofMeasure')),
            ],
            options={
                'db_table': 'rfx_item',
            },
        ),
        migrations.CreateModel(
            name='RFXSupplier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quote_submited_status', models.PositiveSmallIntegerField(choices=[(1, 'waiting for quote'), (2, 'submited'), (3, 'auction'), (4, 'awarded'), (5, 'rejected'), (6, 'closed')])),
                ('awarded', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'awarded'), (2, 'rejected'), (3, 'auction cancelled')], null=True)),
                ('rfx', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rfx_suppliers', to='rfx.RFX')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_suppliers', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'rfx_supplier',
            },
        ),
        migrations.CreateModel(
            name='RFXItemSupplier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.FloatField()),
                ('confirm_price', models.FloatField(null=True)),
                ('rfx', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rfxs', to='rfx.RFX')),
                ('rfx_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rfx_items', to='rfx.RFXItem')),
                ('rfx_supplier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rfx_suppliers', to='rfx.RFXSupplier')),
            ],
            options={
                'db_table': 'rfx_item_supplier',
            },
        ),
        migrations.CreateModel(
            name='RFXAttachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attachment', models.FileField(upload_to=apps.rfx.models.attachment_directory_path)),
                ('rfx', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='rfx.RFX')),
            ],
            options={
                'db_table': 'rfx_attachment',
            },
        ),
    ]
